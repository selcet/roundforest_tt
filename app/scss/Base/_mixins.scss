// Fonts
// --------------------------------------------------
@mixin customFont($fontName, $fileName, $path, $weight: normal, $style: normal) {
    @font-face {
        font-family: $fontName;
        src: url($path + $fileName + '.eot?v=' + $compileVersion);
        src: url($path + $fileName + '.eot?v=' + $compileVersion + '#iefix') format('embedded-opentype'),
        url($path + $fileName + '.woff?v=' + $compileVersion) format('woff'),
        url($path + $fileName + '.ttf?v=' + $compileVersion) format('truetype'),
        url($path + $fileName + '.svg#' + $fileName + '?v=' + $compileVersion) format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}

/// Mixin for applying transition action
///
/// @param {String} $transition [all] - property to transition, defaults to all
/// @param {Number} $time [.4s] - Amount of time for the transition to complete, defaults to .4s
/// @param {String} $animation [ease] - easing type for transition to use, defaults to ease
///
/// @example scss - Usage
///     .Default {
///         @include transition();
///     }
///
///     .Element {
///         @include transition(height, 1s, ease-in-out);
///     }
///
/// @example css - CSS output
///     .Default {
///         transition: all .4s, ease;
///     }
///     .Element {
///         transition: height 1s ease-in-out;
///     }
@mixin transition($transition: all, $time: .4s, $animation: ease) {
    transition: $transition $time $animation;
}

/// Function to convert px size to rem
///
/// @param {Number} $size - Size in pixels to convert to rem
@function calculate-rem($size) {
    $rem-size: $size / 10px;

    @return #{$rem-size}rem;
}

/// Mixin to output rem font-size with px fallback
///
/// @param {Number} $size - Elementâ€™s `font-size` in pixels
///
/// @example scss - Usage
///     h1 {
///         @include font-size(32px);
///     }
///
/// @example css - CSS output
///     h1 {
///         font-size: 32px;
///         font-size: 2rem;
///     }
// scss-lint:disable VariableForProperty, DuplicateProperty
@mixin font-size($size) {
    font-size: $size;
    font-size: calculate-rem($size); /* stylelint-disable-line declaration-block-no-duplicate-properties */
}

// Media queries
// --------------------------------------------------

@mixin screen($minWidth, $maxWidth) {
    // use plus '1' for don't overlap
    @media screen and (min-width: $minWidth + 1) and (max-width: $maxWidth) {
        @content;
    }
}

@mixin maxScreen($maxWidth) {
    @media screen and (max-width: $maxWidth) {
        @content;
    }
}

@mixin minScreen($minWidth) {
    // use plus '1' for don't overlap
    @media screen and (min-width: $minWidth + 1) {
        @content;
    }
}

/// Mixin to create rounded sale block in corner of parent el
///
/// @param {Number} $width - Width for rounded sale block, defaults to '5.7rem'
/// @param {Number} $height - Height for rounded sale block, defaults to '5.7rem'
/// @param {Number | String} $prime-color - Value for background and border-color, defaults to '$color-brand'
/// @param {String} $sale-count [72% off] - Value for text inside rounded sale block, defaults to '72% off'
///
@mixin rounded-sale($width: 5.7rem, $height: 5.7rem, $prime-color: $color-brand, $sale-count: '72% off') {
    @include transition($time: .3s);

    &::before {
        background: $prime-color;
        border-radius: 50%;
        color: $color-white;
        content: '#{$sale-count}';
        display: inline-block;
        height: $height;
        line-height: 1.6rem;
        padding: 1.3rem 1.5rem;
        position: absolute;
        top: .8rem;
        left: 1.1rem;
        text-align: center;
        width: $width;
    }

    &::after {
        border: .3rem solid transparent;
        content: '';
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;

        @include transition($time: .3s);
    }

    &:hover {
        box-shadow: 0 0 1rem 0.3rem rgba($color-gray5, .2);
        cursor: pointer;

        &::after {
            border-color: $prime-color;
        }
    }
}